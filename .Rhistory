legend.position = c(.825,.1125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
p
table(df_plot$cat)
table(df_plot$cat, useNA = "always")
df_plot$Word[is.na(df_plot$cat)]
df_plot[is.na(df_plot$cat), ]
cat_cols <- c(Outcome = "gray70", Indicator = "tomato", Cause = "gold", Protective = "olivedrab2")
bl1 <- readRDS("bl_l1.RData")
bl2 <- readRDS("bl_l2.RData")
bg1 <- readRDS("bl_g1.RData")
bg2 <- readRDS("bl_g2.RData")
s1l <- readRDS("s1_l1.RData")
s2l <- readRDS("s2_l1.RData")
s1g <- readRDS("s1_g1.RData")
s2g <- readRDS("s2_g1.RData")
p <- quote({
# Set margins to 0
par(mar=c(0,0,0,0),
mfrow=c(2,2))
plot(bg1, edge.curved = 0,
layout=bl1,
vertex.label.family = "Arial",
vertex.label.cex = 0.5,
#vertex.shape = "circle2",
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "a")
legend(x=-1.1, y=1.1, names(cat_cols), pch=legend_shapes, col=cat_cols, pt.bg=cat_cols, pt.cex=1.4, cex=.7, bty="n", ncol=1)
plot(bg2, edge.curved = 0,
layout=bl2,
vertex.label.family = "Arial",
vertex.label.cex = 0.5,
#vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "b")
plot(s1g, edge.curved = 0,
layout=s1l,
vertex.label.family = "Arial",
vertex.label.cex = 0.5,
#vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "c")
plot(s2g, edge.curved = 0,
layout=s2l,
vertex.label.family = "Arial",
vertex.label.cex = 0.5,
#vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "d")
})
# Save files
# png("networks.png", width = 960)
# eval(p)
# dev.off()
png("networks.png", height = 200, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
svg("networks.svg", width = 14)
eval(p)
dev.off()
p <- quote({
# Set margins to 0
par(mar=c(0.5,0.5,0.5,0.5),
mfrow=c(1,2))
plot(s1g, edge.curved = 0,
layout=s1l,
vertex.label.family = "Arial",
vertex.label.cex = 0.5,
##vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "a")
legend(x=-1.2, y=1.1, names(cat_cols), pch=legend_shapes, col=cat_cols, pt.bg=cat_cols, pt.cex=1.4, cex=.6, bty="n", ncol=1)
plot(s2g, edge.curved = 0,
layout=s2l,
vertex.label.family = "Arial",
vertex.label.cex = 0.5,
##vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "b")
})
png("tmnetworks.png", height = 100, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
svg("tmnetworks.svg", width = 14)
eval(p)
dev.off()
loadfonts(device = "postscript") ## for postscript()
postscript("tmnetworks.eps", height = (.5*7.9), width = 7.9,
family = "Arial", paper = "special", onefile = FALSE,
horizontal = FALSE)
eval(p)
dev.off()
cat_cols <- c(Outcome = "gray70", Indicator = "tomato", Cause = "gold", Protective = "olivedrab2")
bl1 <- readRDS("bl_l1.RData")
bl2 <- readRDS("bl_l2.RData")
bg1 <- readRDS("bl_g1.RData")
bg2 <- readRDS("bl_g2.RData")
s1l <- readRDS("s1_l1.RData")
s1l[23,2] <- 6.5
s1l[44,2] <- 6
s1l[6,2] <- 5.7
s1l[34,2] <- 5.3
s1l[26,] <- c(-1.8, 2.2)
s1l[5,1] <- -.4
s1l[40,1] <- -1.1
s1l[29,] <- c(-1,1.7)
s2l <- readRDS("s2_l1.RData")
s1g <- readRDS("s1_g1.RData")
s2g <- readRDS("s2_g1.RData")
p <- quote({
# Set margins to 0
par(mar=c(0,0,0,0),
mfrow=c(2,2))
plot(bg1, edge.curved = 0,
layout=bl1,
vertex.label.family = "Arial",
vertex.label.cex = 0.5,
#vertex.shape = "circle2",
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "a")
legend(x=-1.1, y=1.1, names(cat_cols), pch=legend_shapes, col=cat_cols, pt.bg=cat_cols, pt.cex=1.4, cex=.7, bty="n", ncol=1)
plot(bg2, edge.curved = 0,
layout=bl2,
vertex.label.family = "Arial",
vertex.label.cex = 0.5,
#vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "b")
plot(s1g, edge.curved = 0,
layout=s1l,
vertex.label.family = "Arial",
vertex.label.cex = 0.5,
#vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "c")
plot(s2g, edge.curved = 0,
layout=s2l,
vertex.label.family = "Arial",
vertex.label.cex = 0.5,
#vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "d")
})
# Save files
# png("networks.png", width = 960)
# eval(p)
# dev.off()
png("networks.png", height = 200, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
svg("networks.svg", width = 14)
eval(p)
dev.off()
p <- quote({
# Set margins to 0
par(mar=c(0.5,0.5,0.5,0.5),
mfrow=c(1,2))
plot(s1g, edge.curved = 0,
layout=s1l,
vertex.label.family = "Arial",
vertex.label.cex = 0.5,
##vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "a")
legend(x=-1.2, y=1.1, names(cat_cols), pch=legend_shapes, col=cat_cols, pt.bg=cat_cols, pt.cex=1.4, cex=.6, bty="n", ncol=1)
plot(s2g, edge.curved = 0,
layout=s2l,
vertex.label.family = "Arial",
vertex.label.cex = 0.5,
##vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "b")
})
png("tmnetworks.png", height = 100, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
svg("tmnetworks.svg", width = 14)
eval(p)
dev.off()
loadfonts(device = "postscript") ## for postscript()
postscript("tmnetworks.eps", height = (.5*7.9), width = 7.9,
family = "Arial", paper = "special", onefile = FALSE,
horizontal = FALSE)
eval(p)
dev.off()
library("papaja")
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(knitr)
library(kableExtra)
library(cowplot)
run_everything <- TRUE
notingraph <- list()
keyw <- function(x){
x
}
cat_shapes <- c(Outcome = "square2", Indicator = "circle2", Cause = "quad2", Protective = "tri2")
legend_shapes <- c("circle2" = 21, "square2" = 22, "quad2" = 23, "tri2" = 24)[cat_shapes]
scale_shapes <- legend_shapes
names(scale_shapes) <- names(cat_shapes)[match(names(legend_shapes), cat_shapes)]
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed, echo = FALSE, message = FALSE, warning = FALSE, results="hide")
library(data.table)
library(stringr)
library(udpipe)
library(igraph)
library(wordcloud)
library(Matrix)
library(ggplot2)
library(yaml)
source("word_functions.R")
source("circle2.R")
dict <- read_yaml("yaml_dict.txt")
bl_theory <- readLines("baseline_theory.txt")
bl_review <- readLines("baseline_reviews.txt")
df <- data.frame(word = trimws(tolower(bl_theory)), source = "theory")
df <- rbind(df, data.frame(word = trimws(tolower(bl_review)), source = "reviews"))
# Categorize words
res_cat <- cat_words(df$word, dict, handle_dups = "all")
df$cat <- res_cat$words
df <- df[!duplicated(df$cat), ]
if(!is.null(res_cat[["unmatched"]])){
df <- df[!df$cat %in% names(res_cat$unmatched), ]
}
baseline_cat <- df
baseline <- c("dysregulation", unique(df$cat[df$source == "theory"]))
saveRDS(baseline, "baseline.RData")
saveRDS(baseline_cat, "baseline_cat.RData")
in_theory <- df$word[df$source == "theory"]
in_rev <- df$word[!df$source == "theory"]
in_rev[!in_rev %in% in_theory]
df_plot <- data.frame(term1 = df$cat[df$source == "theory"], term2 = "dysregulation")
df_plot <- df_plot[!df_plot$term1 == df_plot$term2, ]
edg <- df_plot
edg$width = 1
vert <- data.frame(name = unique(c(df_plot$term1, df_plot$term2)), label = pretty_words(unique(c(df_plot$term1, df_plot$term2))), size = 1)
vert <- vert[vert$name %in% unique(c(edg$term1, edg$term2)), ]
categ <- read.csv("study1_categorization.csv", stringsAsFactors = FALSE)
if(any(!vert$name %in% categ$name)){
write.table(vert$name[!vert$name %in% categ$name], "clipboard", sep = "\n", row.names = FALSE, col.names= FALSE)
stop("Please re-categorize missing vertices.")
}
vert$Category <- categ$category[match(vert$name, categ$name)]
cat_cols <- c(Outcome = "gray70", Indicator = "tomato", Cause = "gold", Protective = "forestgreen")
cat_cols <- c(Outcome = "gray70", Indicator = "tomato", Cause = "gold", Protective = "olivedrab2")
vert$color <- cat_cols[vert$Category]
vert$shape <- cat_shapes[vert$Category]
vert$frame.color <- cat_cols[vert$Category]
vert$size <- scales::rescale(log(vert$size), c(4, 12))
g1 <- graph_from_data_frame(edg, vertices = vert,
directed = FALSE)
# Plot 2 ------------------------------------------------------------------
df_plot <- data.frame(term1 = df$cat, term2 = "dysregulation", source = df$source)
edg <- df_plot
edg$width = 1
vert <- data.frame(name = unique(c(df_plot$term1, df_plot$term2)), label = pretty_words(unique(c(df_plot$term1, df_plot$term2))), size = 1)
vert <- vert[vert$name %in% unique(c(edg$term1, edg$term2)), ]
categ <- read.csv("study1_categorization.csv", stringsAsFactors = FALSE)
if(any(!vert$name %in% categ$name)){
write.table(vert$name[!vert$name %in% categ$name], "clipboard", sep = "\n", row.names = FALSE, col.names= FALSE)
stop("Please re-categorize missing vertices.")
}
vert$Category <- categ$category[match(vert$name, categ$name)]
vert$faded <- vert$name %in% df$cat[df$source == "theory"]
cat_cols <- c(Outcome = "gray70", Indicator = "tomato", Cause = "gold", Protective = "olivedrab2")
vert$color <- cat_cols[vert$Category]
vert$shape <- cat_shapes[vert$Category]
vert$frame.color <- cat_cols[vert$Category]
vert$color[vert$faded] <- "#FFFFFF"
vert$size <- scales::rescale(log(vert$size), c(4, 12))
g2 <- graph_from_data_frame(edg, vertices = vert,
directed = FALSE)
set.seed(4) #4 #2 #3
l1 <- l <- layout_with_fr(g1)
l1[1,] <- c(-2.21258774559817, 25.7)
l1[28, 2] <- 29.5
l1[6, 2] <- 30
l1[21, 1] <- -0.05
set.seed(3)
l2 <- layout_with_fr(g2)
l2[28, 2] <- -1.8
l2[5, 2] <- -4.5
l2[15, 2] <- -6.8
p <- quote({
# Set margins to 0
par(mar=c(0.5,0.5,0.5,0.5),
mfrow=c(1,2))
plot(g1, edge.curved = 0, layout=l1,
vertex.label.family = "Arial",
vertex.label.cex = 0.7,
#vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "a")
legend(x=-1.2, y=1.1, names(cat_cols), pch=legend_shapes, col=cat_cols, pt.bg=cat_cols, pt.cex=1.4, cex=.7, bty="n", ncol=1)
plot(g2, edge.curved = 0, layout=l2,
vertex.label.family = "Arial",
vertex.label.cex = 0.7,
#vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "b")
})
saveRDS(g1, "bl_g1.RData")
saveRDS(g2, "bl_g2.RData")
saveRDS(l1, "bl_l1.RData")
saveRDS(l2, "bl_l2.RData")
# Save files
png("baseline_network.png", height = 100, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
loadfonts(device = "postscript") ## for postscript()
postscript("baseline_network.eps", height = (.5*7.9), width = 7.9,
family = "Arial", paper = "special", onefile = FALSE,
horizontal = FALSE)
eval(p)
dev.off()
svg("baseline_network.svg", width = 14)
eval(p)
dev.off()
bg1
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
df_analyze <- data.table(readRDS("study2_df_analyze.RData"))
if(!is.data.table(df_analyze)) stop("Not a data.table")
nounbydoc <- df_analyze[, list(freq = .N), by = list(doc_id = doc_id, term = word_coded)]
number_docs_words2 <- c(docs = length(unique(nounbydoc$doc_id)), words = length(unique(nounbydoc$term)))
nounbydoc$freq <- 1
dtm <- udpipe::document_term_matrix(document_term_frequencies(nounbydoc))
topterms <- colSums(dtm)
term_freq <- table(topterms)
topterms <- sort(topterms, decreasing = TRUE)
# Select most common terms ------------------------------------------------
set.seed(720)
dtm_top <- dtm[, select_words(dtm, .975)]
dtm_top <- dtm_top[rowSums(dtm_top) > 0, ]
dtm_top
term_freqtop <- table(colSums(dtm_top))
term_freqtop
term_freq <- as.data.frame.table(term_freq)
term_freq$pruned <- term_freq[[1]] %in% names(term_freqtop)
topterms <- colSums(dtm_top)
topterms
word_freq <- data.frame(Word = names(topterms), Frequency = topterms, row.names = NULL)
write.csv(word_freq, "study2_word_freq.csv", row.names = FALSE)
df_plot <- word_freq
df_plot$Word <- pretty_words(df_plot$Word)
df_plot
df_plot
df_plot$Frequency <- sqrt(df_plot$Frequency)
p <- quote({
set.seed(46)
wordcloud(words = df_plot$Word, freq = df_plot$Frequency, scale = c(4,.4), max.words = 150, rot.per = 0,  random.order = FALSE, colors = brewer.pal(8, "Dark2"))
})
p
eval(p)
topterms <- colSums(dtm_top)
baseline <- readRDS("baseline.RData")
word_freq <- data.frame(Word = names(topterms), Frequency = topterms, row.names = NULL)
word_freq <- data.frame(Word = names(topterms), Frequency = topterms, row.names = NULL)
df_plot <- word_freq
df_plot <- df_plot[order(df_plot$Frequency, decreasing = TRUE), ]
categ <- read.csv("study1_categorization.csv", stringsAsFactors = FALSE)
df_plot$cat <- categ$category[match(df_plot$Word, categ$name)]
df_plot
df_plot$faded <- df_plot$Word %in% baseline
# Tag words that are not in the cooccurrence graph
in_graph <- row.names(read.csv("s2_cooc.csv", row.names = 1))
notingraph <- !df_plot$Word %in% in_graph
df_plot$notingraph <- notingraph
italic_labels <- as.character(df_plot$Word)
italic_labels[notingraph] <- sapply(italic_labels[notingraph], function(x){
parse(text = paste0("italic('", x, "')"))
})
df_plot$Word <- pretty_words(df_plot$Word)
df_plot
df_plot$Word <- ordered(df_plot$Word, levels = df_plot$Word[order(df_plot$Frequency)])
df_plot
df_plot$Word <- ordered(df_plot$Word, levels = df_plot$Word[order(df_plot$Frequency)])
cat_cols <- c(Outcome = "gray70", Indicator = "tomato", Cause = "gold", Protective = "forestgreen")
df_plot$cat <- ordered(df_plot$cat, levels = c("Outcome", "Indicator", "Cause", "Protective"))
write_yaml(df_plot$Word, "s2_words.yml")
p <- ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray70", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray70", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(fill = guide_legend(title = NULL,
override.aes = list(linetype = c(1, 1, 1,1,1),
shape = scale_shapes,
colour = cat_cols[names(scale_shapes)]))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.825,.1125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
eval(p)
p <- ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray70", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray70", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(fill = guide_legend(title = NULL,
override.aes = list(linetype = c(1, 1, 1,1),
shape = scale_shapes,
colour = cat_cols[names(scale_shapes)]))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.825,.1125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
eval(p)
rmarkdown::render()
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
p <- quote(cowplot::plot_grid(readRDS("s1_varimp.RData")+theme(legend.position = "none")+xlab("Word frequency (Analysis 1)"), readRDS("s2_varimp.RData")+xlab("Word frequency (Analysis 2)")))
loadfonts(device = "postscript") ## for postscript()
postscript("varimps.eps", height = ((150/200)*7.9), width = 7.9,
family = "Arial")
eval(p)
dev.off()
save_plot("varimps_cp.eps", plot = eval(p), device = "postscript", base_height = ((150/200)*7.9), base_width = 7.9)
save_plot("varimps_cp.eps", plot = eval(p), device = cairo_ps, base_height = ((150/200)*7.9), base_width = 7.9)
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
install.packages("worcs")
worcs::git_update("Final submission")
worcs::git_update("Final submission")
library(RefManageR)
